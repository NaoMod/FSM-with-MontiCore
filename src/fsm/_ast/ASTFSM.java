/* generated from model FSM */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTFSM extends ASTCNode  implements fsm._ast.ASTFSMNode {

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  java.util.List<fsm._ast.ASTState> states = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  String initialState ;

    /* generated by template core.Attribute*/
 protected  java.util.List<String> finalStates = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  fsm._symboltable.IFSMScope enclosingScope ;

    /* generated by template core.Attribute*/
 protected  fsm._symboltable.StateSymbol initialStateSymbol ;

    /* generated by template core.Attribute*/
 protected  Map<String,fsm._symboltable.StateSymbol> finalStatesSymbol = new HashMap<>();


    /* generated by template core.Constructor*/
 protected  ASTFSM()
 {
  /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)

 {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)

 {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTFSM comp;
    if ((o instanceof ASTFSM)) {
      comp = (ASTFSM) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing states
    if (this.states.size() != comp.states.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<fsm._ast.ASTState> it1 = this.states.iterator();
        Iterator<fsm._ast.ASTState> it2 = comp.states.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<fsm._ast.ASTState> it1 = this.states.iterator();
        while (it1.hasNext()) {
          fsm._ast.ASTState oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<fsm._ast.ASTState> it2 = comp.states.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)

 {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)

 {
      /* generated by template data.DeepEqualsWithComments*/

      ASTFSM comp;
    if ((o instanceof ASTFSM)) {
      comp = (ASTFSM) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing states
    if (this.states.size() != comp.states.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<fsm._ast.ASTState> it1 = this.states.iterator();
        Iterator<fsm._ast.ASTState> it2 = comp.states.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<fsm._ast.ASTState> it1 = this.states.iterator();
        while (it1.hasNext()) {
          fsm._ast.ASTState oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<fsm._ast.ASTState> it2 = comp.states.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)

 {
      /* generated by template data.EqualAttributes*/

      ASTFSM comp;
    if ((o instanceof ASTFSM)) {
      comp = (ASTFSM) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
	// comparing initialState 
    if ( (this.initialState == null && comp.initialState != null) 
      || (this.initialState != null && !this.initialState.equals(comp.initialState)) ) {
      return false;
    }
	// comparing finalStates 
    if ( (this.finalStates == null && comp.finalStates != null) 
      || (this.finalStates != null && !this.finalStates.equals(comp.finalStates)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)

 {
      /* generated by template data.EqualsWithComments*/

      ASTFSM comp;
    if ((o instanceof ASTFSM)) {
      comp = (ASTFSM) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTFSM deepClone ()

 {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTFSM deepClone (ASTFSM result)

 {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

      result.setName(getName());
      getStateList().forEach(s -> result.states.add(s.deepClone()));
      result.setInitialState(getInitialState());
      for ( int i = 0; i < this.getFinalStatesList().size() ; i++ ) {
        result.addFinalStates(getFinalStates(i));
      }
    
    return result;

}

    /* generated by template core.Method*/
 public  String getName ()

 {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  boolean containsState (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllStates (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<fsm._ast.ASTState> iteratorStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().size();

}

    /* generated by template core.Method*/
 public  fsm._ast.ASTState[] toArrayStates (fsm._ast.ASTState[] array)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<fsm._ast.ASTState> spliteratorStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<fsm._ast.ASTState> streamStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().stream();

}

    /* generated by template core.Method*/
 public  Stream<fsm._ast.ASTState> parallelStreamStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().parallelStream();

}

    /* generated by template core.Method*/
 public  fsm._ast.ASTState getState (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfState (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfState (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsStates (Object o)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<fsm._ast.ASTState> listIteratorStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<fsm._ast.ASTState> listIteratorStates (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<fsm._ast.ASTState> subListStates (int start,int end)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<fsm._ast.ASTState> getStateList ()

 {
      /* generated by template methods.Get*/

return this.states;

}

    /* generated by template core.Method*/
 public  String getInitialState ()

 {
      /* generated by template methods.Get*/

return this.initialState;

}

    /* generated by template core.Method*/
 public  boolean containsFinalStates (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllFinalStates (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<String> iteratorFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().size();

}

    /* generated by template core.Method*/
 public  String[] toArrayFinalStates (String[] array)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<String> spliteratorFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<String> streamFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().stream();

}

    /* generated by template core.Method*/
 public  Stream<String> parallelStreamFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().parallelStream();

}

    /* generated by template core.Method*/
 public  String getFinalStates (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfFinalStates (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfFinalStates (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsFinalStates (Object o)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<String> listIteratorFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<String> listIteratorFinalStates (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<String> subListFinalStates (int start,int end)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<String> getFinalStatesList ()

 {
      /* generated by template methods.Get*/

return this.finalStates;

}

    /* generated by template core.Method*/
 public  void setName (String name)

 {
      /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template core.Method*/
 public  void clearStates ()

 {
      /* generated by template methods.MethodDelegate*/

this.getStateList().clear();

}

    /* generated by template core.Method*/
 public  boolean addState (fsm._ast.ASTState element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllStates (Collection<? extends fsm._ast.ASTState> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeState (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllStates (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllStates (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfState (Predicate<? super fsm._ast.ASTState> filter)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachStates (Consumer<? super fsm._ast.ASTState> action)

 {
      /* generated by template methods.MethodDelegate*/

this.getStateList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addState (int index,fsm._ast.ASTState element)

 {
      /* generated by template methods.MethodDelegate*/

this.getStateList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllStates (int index,Collection<? extends fsm._ast.ASTState> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  fsm._ast.ASTState removeState (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().remove(index);

}

    /* generated by template core.Method*/
 public  fsm._ast.ASTState setState (int index,fsm._ast.ASTState element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getStateList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllStates (UnaryOperator<fsm._ast.ASTState> operator)

 {
      /* generated by template methods.MethodDelegate*/

this.getStateList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortStates (Comparator<? super fsm._ast.ASTState> comparator)

 {
      /* generated by template methods.MethodDelegate*/

this.getStateList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setStateList (List<fsm._ast.ASTState> states)

 {
      /* generated by template methods.Set*/

this.states = states;

}

    /* generated by template core.Method*/
 public  void setInitialState (String initialState)

 {
      /* generated by template methods.Set*/

this.initialState = initialState;

}

    /* generated by template core.Method*/
 public  void clearFinalStates ()

 {
      /* generated by template methods.MethodDelegate*/

this.getFinalStatesList().clear();

}

    /* generated by template core.Method*/
 public  boolean addFinalStates (String element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllFinalStates (Collection<? extends String> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeFinalStates (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllFinalStates (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllFinalStates (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfFinalStates (Predicate<? super String> filter)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachFinalStates (Consumer<? super String> action)

 {
      /* generated by template methods.MethodDelegate*/

this.getFinalStatesList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addFinalStates (int index,String element)

 {
      /* generated by template methods.MethodDelegate*/

this.getFinalStatesList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllFinalStates (int index,Collection<? extends String> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  String removeFinalStates (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().remove(index);

}

    /* generated by template core.Method*/
 public  String setFinalStates (int index,String element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllFinalStates (UnaryOperator<String> operator)

 {
      /* generated by template methods.MethodDelegate*/

this.getFinalStatesList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortFinalStates (Comparator<? super String> comparator)

 {
      /* generated by template methods.MethodDelegate*/

this.getFinalStatesList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setFinalStatesList (List<String> finalStates)

 {
      /* generated by template methods.Set*/

this.finalStates = finalStates;

}

    /* generated by template core.Method*/
 public  void accept (fsm._visitor.FSMTraverser visitor)

 {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof fsm._visitor.FSMTraverser) {
    accept((fsm._visitor.FSMTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x96409 AST node type ASTFSM expected a visitor of type fsm._visitor.FSMTraverser, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof fsm._visitor.FSMTraverser) {
    accept((fsm._visitor.FSMTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x95110 AST node type ASTFSM expected a visitor of type fsm._visitor.FSMTraverser, but got de.monticore.mcbasics._visitor.MCBasicsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof fsm._visitor.FSMTraverser) {
    accept((fsm._visitor.FSMTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x41949 AST node type ASTFSM expected a visitor of type fsm._visitor.FSMTraverser, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.visitor.ITraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof fsm._visitor.FSMTraverser) {
    accept((fsm._visitor.FSMTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x76434 AST node type ASTFSM expected a visitor of type fsm._visitor.FSMTraverser, but got de.monticore.visitor.ITraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTFSM _construct ()

 {
      return fsm.FSMMill.fSMBuilder().uncheckedBuild();
}

    /* generated by template core.Method*/
 public  fsm._symboltable.IFSMScope getEnclosingScope ()

 {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (fsm._symboltable.IFSMScope enclosingScope)

 {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof fsm._symboltable.IFSMScope){
    this.enclosingScope = (fsm._symboltable.IFSMScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x88953 The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type fsm._symboltable.IFSMScope. Please call the Method setEnclosingScope with a parameter form type fsm._symboltable.IFSMScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof fsm._symboltable.IFSMScope){
    this.enclosingScope = (fsm._symboltable.IFSMScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x88952 The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type fsm._symboltable.IFSMScope. Please call the Method setEnclosingScope with a parameter form type fsm._symboltable.IFSMScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof fsm._symboltable.IFSMScope){
    this.enclosingScope = (fsm._symboltable.IFSMScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x88951 The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type fsm._symboltable.IFSMScope. Please call the Method setEnclosingScope with a parameter form type fsm._symboltable.IFSMScope");
  }
}

    /* generated by template core.Method*/
 public  fsm._symboltable.StateSymbol getInitialStateSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.GetSymbol*/

  updateInitialStateSymbol();
  if (initialStateSymbol == null) {
    Log.error("0xA7303x49962 get for initialStateSymbol can't return a value. Attribute is empty.");
  }
  return initialStateSymbol   ;

}

    /* generated by template core.Method*/
 public  boolean isPresentInitialStateSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.IsPresentSymbol*/

     updateInitialStateSymbol();
     return initialStateSymbol != null;

}

    /* generated by template core.Method*/
 protected  void updateInitialStateSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.UpdateLoader*/

  if (getEnclosingScope() != null && (initialStateSymbol == null || !getInitialState().equals(initialStateSymbol.getName()))) {
    initialStateSymbol = getEnclosingScope().resolveState(getInitialState()).orElse(null);
  }

}

    /* generated by template core.Method*/
 public  boolean containsFinalStatesSymbol (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllFinalStatesSymbol (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyFinalStatesSymbol ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<Optional<fsm._symboltable.StateSymbol>> iteratorFinalStatesSymbol ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeFinalStatesSymbol ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().size();

}

    /* generated by template core.Method*/
 public  Optional<fsm._symboltable.StateSymbol>[] toArrayFinalStatesSymbol (Optional<fsm._symboltable.StateSymbol>[] array)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayFinalStatesSymbol ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<Optional<fsm._symboltable.StateSymbol>> spliteratorFinalStatesSymbol ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<Optional<fsm._symboltable.StateSymbol>> streamFinalStatesSymbol ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().stream();

}

    /* generated by template core.Method*/
 public  Stream<Optional<fsm._symboltable.StateSymbol>> parallelStreamFinalStatesSymbol ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().parallelStream();

}

    /* generated by template core.Method*/
 public  Optional<fsm._symboltable.StateSymbol> getFinalStatesSymbol (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfFinalStatesSymbol (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfFinalStatesSymbol (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsFinalStatesSymbol (Object o)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeFinalStatesSymbol ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<Optional<fsm._symboltable.StateSymbol>> listIteratorFinalStatesSymbol ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<Optional<fsm._symboltable.StateSymbol>> listIteratorFinalStatesSymbol (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<Optional<fsm._symboltable.StateSymbol>> subListFinalStatesSymbol (int start,int end)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesSymbolList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<Optional<fsm._symboltable.StateSymbol>> getFinalStatesSymbolList ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.GetSymbolList*/

  updateFinalStatesSymbol();
  java.util.List<Optional<fsm._symboltable.StateSymbol>> temp = new java.util.ArrayList<>();
  for (String element : this.finalStates) {
    if (finalStatesSymbol.containsKey(element)) {
      temp.add(Optional.of(finalStatesSymbol.get(element)));
    } else {
      temp.add(Optional.empty());
    }
  }
  return temp;


}

    /* generated by template core.Method*/
 protected  void updateFinalStatesSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.UpdateLoaderList*/

if (getEnclosingScope() != null) {
  for (String name : finalStates) {
    if (!finalStatesSymbol.containsKey(name)) {
      getEnclosingScope().resolveState(name).ifPresent(s ->finalStatesSymbol.put(name, s));
    }
  }
}
}

    /* generated by template core.Method*/
 public  fsm._ast.ASTState getInitialStateDefinition ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.GetDefinition*/

    if (isPresentInitialStateDefinition()) {
        return getInitialStateSymbol().getAstNode();
    }
    Log.error("0xA7203x44818 initialStateDefinition can't return a value. It is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentInitialStateDefinition ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.IsPresentDefinition*/

    return isPresentInitialStateSymbol() && getInitialStateSymbol().isPresentAstNode();

}

    /* generated by template core.Method*/
 public  boolean containsFinalStatesDefinition (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllFinalStatesDefinition (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyFinalStatesDefinition ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<Optional<fsm._ast.ASTState>> iteratorFinalStatesDefinition ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeFinalStatesDefinition ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().size();

}

    /* generated by template core.Method*/
 public  Optional<fsm._ast.ASTState>[] toArrayFinalStatesDefinition (Optional<fsm._ast.ASTState>[] array)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayFinalStatesDefinition ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<Optional<fsm._ast.ASTState>> spliteratorFinalStatesDefinition ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<Optional<fsm._ast.ASTState>> streamFinalStatesDefinition ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().stream();

}

    /* generated by template core.Method*/
 public  Stream<Optional<fsm._ast.ASTState>> parallelStreamFinalStatesDefinition ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().parallelStream();

}

    /* generated by template core.Method*/
 public  Optional<fsm._ast.ASTState> getFinalStatesDefinition (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfFinalStatesDefinition (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfFinalStatesDefinition (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsFinalStatesDefinition (Object o)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeFinalStatesDefinition ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<Optional<fsm._ast.ASTState>> listIteratorFinalStatesDefinition ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<Optional<fsm._ast.ASTState>> listIteratorFinalStatesDefinition (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<Optional<fsm._ast.ASTState>> subListFinalStatesDefinition (int start,int end)

 {
      /* generated by template methods.MethodDelegate*/

return this.getFinalStatesDefinitionList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<Optional<fsm._ast.ASTState>> getFinalStatesDefinitionList ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.GetDefinitionList*/

  java.util.List<Optional<fsm._ast.ASTState>> list = new java.util.ArrayList<>();
  for (Optional<fsm._symboltable.StateSymbol> symbol : getFinalStatesSymbolList()) {
    if (symbol.isPresent() && symbol.get().isPresentAstNode()) {
      list.add(Optional.ofNullable(symbol.get().getAstNode()));
    } else {
      list.add(Optional.empty());
    }
  }
  return list;

}

}
