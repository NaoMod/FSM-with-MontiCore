/* generated from model FSM */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTTransition extends ASTCNode  implements fsm._ast.ASTFSMNode {

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral input ;

    /* generated by template core.Attribute*/
 protected  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral output ;

    /* generated by template core.Attribute*/
 protected  fsm._symboltable.IFSMScope enclosingScope ;

    /* generated by template core.Attribute*/
 protected  fsm._symboltable.StateSymbol nameSymbol ;


    /* generated by template core.Constructor*/
 protected  ASTTransition()
 {
  /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)

 {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)

 {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTTransition comp;
    if ((o instanceof ASTTransition)) {
      comp = (ASTTransition) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
     // comparing input
     if ( (this.input == null && comp.input != null) ||
        (this.input != null && !this.input.deepEquals(comp.input, forceSameOrder)) ) {
        return false;
     }
     // comparing output
     if ( (this.output == null && comp.output != null) ||
        (this.output != null && !this.output.deepEquals(comp.output, forceSameOrder)) ) {
        return false;
     }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)

 {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)

 {
      /* generated by template data.DeepEqualsWithComments*/

      ASTTransition comp;
    if ((o instanceof ASTTransition)) {
      comp = (ASTTransition) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
      // comparing input
      if ( (this.input == null && comp.input != null) ||
        (this.input != null && !this.input.deepEqualsWithComments(comp.input, forceSameOrder)) ) {
        return false;
      }
      // comparing output
      if ( (this.output == null && comp.output != null) ||
        (this.output != null && !this.output.deepEqualsWithComments(comp.output, forceSameOrder)) ) {
        return false;
      }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)

 {
      /* generated by template data.EqualAttributes*/

      ASTTransition comp;
    if ((o instanceof ASTTransition)) {
      comp = (ASTTransition) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)

 {
      /* generated by template data.EqualsWithComments*/

      ASTTransition comp;
    if ((o instanceof ASTTransition)) {
      comp = (ASTTransition) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTTransition deepClone ()

 {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTTransition deepClone (ASTTransition result)

 {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

      result.setName(getName());
      result.setInput(getInput().deepClone());
      result.setOutput(getOutput().deepClone());
    
    return result;

}

    /* generated by template core.Method*/
 public  String getName ()

 {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral getInput ()

 {
      /* generated by template methods.Get*/

return this.input;

}

    /* generated by template core.Method*/
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral getOutput ()

 {
      /* generated by template methods.Get*/

return this.output;

}

    /* generated by template core.Method*/
 public  void setName (String name)

 {
      /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template core.Method*/
 public  void setInput (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral input)

 {
      /* generated by template methods.Set*/

this.input = input;

}

    /* generated by template core.Method*/
 public  void setOutput (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral output)

 {
      /* generated by template methods.Set*/

this.output = output;

}

    /* generated by template core.Method*/
 public  void accept (fsm._visitor.FSMTraverser visitor)

 {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof fsm._visitor.FSMTraverser) {
    accept((fsm._visitor.FSMTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x85714 AST node type ASTTransition expected a visitor of type fsm._visitor.FSMTraverser, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof fsm._visitor.FSMTraverser) {
    accept((fsm._visitor.FSMTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x18251 AST node type ASTTransition expected a visitor of type fsm._visitor.FSMTraverser, but got de.monticore.mcbasics._visitor.MCBasicsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof fsm._visitor.FSMTraverser) {
    accept((fsm._visitor.FSMTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x73760 AST node type ASTTransition expected a visitor of type fsm._visitor.FSMTraverser, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.visitor.ITraverser visitor)

 {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof fsm._visitor.FSMTraverser) {
    accept((fsm._visitor.FSMTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x82223 AST node type ASTTransition expected a visitor of type fsm._visitor.FSMTraverser, but got de.monticore.visitor.ITraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTTransition _construct ()

 {
      return fsm.FSMMill.transitionBuilder().uncheckedBuild();
}

    /* generated by template core.Method*/
 public  fsm._symboltable.IFSMScope getEnclosingScope ()

 {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (fsm._symboltable.IFSMScope enclosingScope)

 {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof fsm._symboltable.IFSMScope){
    this.enclosingScope = (fsm._symboltable.IFSMScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x86896 The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type fsm._symboltable.IFSMScope. Please call the Method setEnclosingScope with a parameter form type fsm._symboltable.IFSMScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof fsm._symboltable.IFSMScope){
    this.enclosingScope = (fsm._symboltable.IFSMScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x86918 The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type fsm._symboltable.IFSMScope. Please call the Method setEnclosingScope with a parameter form type fsm._symboltable.IFSMScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)

 {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof fsm._symboltable.IFSMScope){
    this.enclosingScope = (fsm._symboltable.IFSMScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x86919 The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type fsm._symboltable.IFSMScope. Please call the Method setEnclosingScope with a parameter form type fsm._symboltable.IFSMScope");
  }
}

    /* generated by template core.Method*/
 public  fsm._symboltable.StateSymbol getNameSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.GetSymbol*/

  updateNameSymbol();
  if (nameSymbol == null) {
    Log.error("0xA7303x63638 get for nameSymbol can't return a value. Attribute is empty.");
  }
  return nameSymbol   ;

}

    /* generated by template core.Method*/
 public  boolean isPresentNameSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.IsPresentSymbol*/

     updateNameSymbol();
     return nameSymbol != null;

}

    /* generated by template core.Method*/
 protected  void updateNameSymbol ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.UpdateLoader*/

  if (getEnclosingScope() != null && (nameSymbol == null || !getName().equals(nameSymbol.getName()))) {
    nameSymbol = getEnclosingScope().resolveState(getName()).orElse(null);
  }

}

    /* generated by template core.Method*/
 public  fsm._ast.ASTState getNameDefinition ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.GetDefinition*/

    if (isPresentNameDefinition()) {
        return getNameSymbol().getAstNode();
    }
    Log.error("0xA7203x30026 nameDefinition can't return a value. It is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentNameDefinition ()

 {
      /* generated by template _ast.ast_class.refSymbolMethods.IsPresentDefinition*/

    return isPresentNameSymbol() && getNameSymbol().isPresentAstNode();

}

}
