/* generated from model FSM */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class FSMDeSer  implements de.monticore.symboltable.serialization.IDeSer<fsm._symboltable.IFSMScope, fsm._symboltable.IFSMArtifactScope, fsm._symboltable.FSMSymbols2Json> {



    /* generated by template core.Method*/
 public  String serialize (fsm._symboltable.IFSMScope toSerialize,fsm._symboltable.FSMSymbols2Json s2j)

 {
      /* generated by template _symboltable.serialization.scopeDeSer.SerializeS2J4ScopeDeSer*/

  de.monticore.symboltable.serialization.JsonPrinter printer = s2j.getJsonPrinter();
  printer.member(de.monticore.symboltable.serialization.JsonDeSers.IS_SHADOWING_SCOPE, toSerialize.isShadowing());
  return printer.toString();

}

    /* generated by template core.Method*/
 public  String serialize (fsm._symboltable.IFSMArtifactScope toSerialize,fsm._symboltable.FSMSymbols2Json s2j)

 {
      /* generated by template _symboltable.serialization.scopeDeSer.SerializeAS4ScopeDeSer*/

  de.monticore.symboltable.serialization.JsonPrinter printer = s2j.getJsonPrinter();
  printer.member("generated-using","www.MontiCore.de technology");
  if(toSerialize.isPresentName()) {
    printer.member(de.monticore.symboltable.serialization.JsonDeSers.NAME, toSerialize.getName());
  }
  if(!toSerialize.getPackageName().isEmpty()) {
    printer.member(de.monticore.symboltable.serialization.JsonDeSers.PACKAGE, toSerialize.getPackageName());
  }
  return printer.toString();

}

    /* generated by template core.Method*/
 public  void serializeAddons (fsm._symboltable.IFSMScope toSerialize,fsm._symboltable.FSMSymbols2Json s2j)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 public  void serializeAddons (fsm._symboltable.IFSMArtifactScope toSerialize,fsm._symboltable.FSMSymbols2Json s2j)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 public  fsm._symboltable.IFSMScope deserializeScope (de.monticore.symboltable.serialization.json.JsonObject scopeJson)

 {
      /* generated by template _symboltable.serialization.scopeDeSer.DeserializeScope*/

  boolean isShadowingScope = scopeJson
      .getBooleanMemberOpt(de.monticore.symboltable.serialization.JsonDeSers.IS_SHADOWING_SCOPE)
      .orElse(false);
  fsm._symboltable.IFSMScope scope = fsm.FSMMill.scope();
  scope.setShadowing(isShadowingScope);
  scope.setExportingSymbols(true);


  deserializeAddons(scope,scopeJson);
  deserializeSymbols(scope, scopeJson);
  return scope;
}

    /* generated by template core.Method*/
 public  fsm._symboltable.IFSMArtifactScope deserializeArtifactScope (de.monticore.symboltable.serialization.json.JsonObject scopeJson)

 {
      /* generated by template _symboltable.serialization.scopeDeSer.DeserializeArtifactScope*/

  fsm._symboltable.IFSMArtifactScope scope = fsm.FSMMill.artifactScope();
  scope.setPackageName(de.monticore.symboltable.serialization.JsonDeSers.getPackage(scopeJson));
  if (scopeJson.hasStringMember(de.monticore.symboltable.serialization.JsonDeSers.NAME)) {
    scope.setName(scopeJson.getStringMember(de.monticore.symboltable.serialization.JsonDeSers.NAME));
  }
  scope.setExportingSymbols(true);


  deserializeAddons(scope,scopeJson);
  deserializeSymbols(scope, scopeJson);
  return scope;
}

    /* generated by template core.Method*/
 protected  void deserializeSymbols (fsm._symboltable.IFSMScope scope,de.monticore.symboltable.serialization.json.JsonObject scopeJson)

 {
      /* generated by template _symboltable.serialization.scopeDeSer.DeserializeSymbols*/


  for (de.monticore.symboltable.serialization.json.JsonObject symbol :
      de.monticore.symboltable.serialization.JsonDeSers.getSymbols(scopeJson)) {
    String kind = de.monticore.symboltable.serialization.JsonDeSers.getKind(symbol);
    de.monticore.symboltable.serialization.ISymbolDeSer deSer = fsm.FSMMill.globalScope().getSymbolDeSer(kind);
    if (null == deSer) {
      Log.warn("0xA1234xx16707 No DeSer found to deserialize symbol of kind `" + kind
        + "`. The following will be ignored: " + symbol);
    continue;
    }

   if ("fsm._symboltable.StateSymbol".equals(kind)
        || "fsm._symboltable.StateSymbol".equals(deSer.getSerializedKind())) {
      fsm._symboltable.StateSymbol s0 = (fsm._symboltable.StateSymbol) deSer.deserialize(symbol);
      scope.add(s0);
    }
    else {
      Log.warn("0xA1634xx16707 Unable to integrate deserialization with DeSer for kind `" + kind
        + "`. The following will be ignored: " + symbol);
    }
  }

}

    /* generated by template core.Method*/
 public  void deserializeAddons (fsm._symboltable.IFSMScope scope,de.monticore.symboltable.serialization.json.JsonObject scopeJson)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 public  void deserializeAddons (fsm._symboltable.IFSMArtifactScope scope,de.monticore.symboltable.serialization.json.JsonObject scopeJson)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

}
