/* generated from model FSM */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;


 public  interface IFSMGlobalScope extends de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsGlobalScope,fsm._symboltable.IFSMScope  { 


  default /* generated by template core.Method*/
 public  Set<String> calculateModelNamesForState (String name)

 {
      /* generated by template _symboltable.iglobalscope.CalculateModelNamesFor*/
  if (name.contains(".")) {
    return com.google.common.collect.Sets.newHashSet(de.se_rwth.commons.Names.getQualifier(name), name);
  }
  return com.google.common.collect.Sets.newHashSet(name);
}

  default /* generated by template core.Method*/
 public  boolean containsAdaptedStateSymbolResolver (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().contains(element);

}

  default /* generated by template core.Method*/
 public  boolean containsAllAdaptedStateSymbolResolver (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().containsAll(collection);

}

  default /* generated by template core.Method*/
 public  boolean isEmptyAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().isEmpty();

}

  default /* generated by template core.Method*/
 public  Iterator<fsm._symboltable.IStateSymbolResolver> iteratorAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().iterator();

}

  default /* generated by template core.Method*/
 public  int sizeAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().size();

}

  default /* generated by template core.Method*/
 public  fsm._symboltable.IStateSymbolResolver[] toArrayAdaptedStateSymbolResolver (fsm._symboltable.IStateSymbolResolver[] array)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().toArray(array);

}

  default /* generated by template core.Method*/
 public  Object[] toArrayAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().toArray();

}

  default /* generated by template core.Method*/
 public  Spliterator<fsm._symboltable.IStateSymbolResolver> spliteratorAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().spliterator();

}

  default /* generated by template core.Method*/
 public  Stream<fsm._symboltable.IStateSymbolResolver> streamAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().stream();

}

  default /* generated by template core.Method*/
 public  Stream<fsm._symboltable.IStateSymbolResolver> parallelStreamAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().parallelStream();

}

  default /* generated by template core.Method*/
 public  fsm._symboltable.IStateSymbolResolver getAdaptedStateSymbolResolver (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().get(index);

}

  default /* generated by template core.Method*/
 public  int indexOfAdaptedStateSymbolResolver (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().indexOf(element);

}

  default /* generated by template core.Method*/
 public  int lastIndexOfAdaptedStateSymbolResolver (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().lastIndexOf(element);

}

  default /* generated by template core.Method*/
 public  boolean equalsAdaptedStateSymbolResolver (Object o)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().equals(o);

}

  default /* generated by template core.Method*/
 public  int hashCodeAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().hashCode();

}

  default /* generated by template core.Method*/
 public  ListIterator<fsm._symboltable.IStateSymbolResolver> listIteratorAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().listIterator();

}

  default /* generated by template core.Method*/
 public  ListIterator<fsm._symboltable.IStateSymbolResolver> listIteratorAdaptedStateSymbolResolver (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().listIterator(index);

}

  default /* generated by template core.Method*/
 public  List<fsm._symboltable.IStateSymbolResolver> subListAdaptedStateSymbolResolver (int start,int end)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().subList(start, end);

}

  /* generated by template core.Method*/
 abstract  public  List<fsm._symboltable.IStateSymbolResolver> getAdaptedStateSymbolResolverList ()

;
  default /* generated by template core.Method*/
 public  void clearAdaptedStateSymbolResolver ()

 {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolverList().clear();

}

  default /* generated by template core.Method*/
 public  boolean addAdaptedStateSymbolResolver (fsm._symboltable.IStateSymbolResolver element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().add(element);

}

  default /* generated by template core.Method*/
 public  boolean addAllAdaptedStateSymbolResolver (Collection<? extends fsm._symboltable.IStateSymbolResolver> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().addAll(collection);

}

  default /* generated by template core.Method*/
 public  boolean removeAdaptedStateSymbolResolver (Object element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().remove(element);

}

  default /* generated by template core.Method*/
 public  boolean removeAllAdaptedStateSymbolResolver (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().removeAll(collection);

}

  default /* generated by template core.Method*/
 public  boolean retainAllAdaptedStateSymbolResolver (Collection<?> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().retainAll(collection);

}

  default /* generated by template core.Method*/
 public  boolean removeIfAdaptedStateSymbolResolver (Predicate<? super fsm._symboltable.IStateSymbolResolver> filter)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().removeIf(filter);

}

  default /* generated by template core.Method*/
 public  void forEachAdaptedStateSymbolResolver (Consumer<? super fsm._symboltable.IStateSymbolResolver> action)

 {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolverList().forEach(action);

}

  default /* generated by template core.Method*/
 public  void addAdaptedStateSymbolResolver (int index,fsm._symboltable.IStateSymbolResolver element)

 {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolverList().add(index, element);

}

  default /* generated by template core.Method*/
 public  boolean addAllAdaptedStateSymbolResolver (int index,Collection<? extends fsm._symboltable.IStateSymbolResolver> collection)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().addAll(index, collection);

}

  default /* generated by template core.Method*/
 public  fsm._symboltable.IStateSymbolResolver removeAdaptedStateSymbolResolver (int index)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().remove(index);

}

  default /* generated by template core.Method*/
 public  fsm._symboltable.IStateSymbolResolver setAdaptedStateSymbolResolver (int index,fsm._symboltable.IStateSymbolResolver element)

 {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolverList().set(index, element);

}

  default /* generated by template core.Method*/
 public  void replaceAllAdaptedStateSymbolResolver (UnaryOperator<fsm._symboltable.IStateSymbolResolver> operator)

 {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolverList().replaceAll(operator);

}

  default /* generated by template core.Method*/
 public  void sortAdaptedStateSymbolResolver (Comparator<? super fsm._symboltable.IStateSymbolResolver> comparator)

 {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolverList().sort(comparator);

}

  /* generated by template core.Method*/
 abstract  public  void setAdaptedStateSymbolResolverList (List<fsm._symboltable.IStateSymbolResolver> adaptedStateSymbolResolver)

;
  default /* generated by template core.Method*/
 public  List<fsm._symboltable.StateSymbol> resolveAdaptedState (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<fsm._symboltable.StateSymbol> predicate)

 {
      /* generated by template _symboltable.iglobalscope.ResolveAdapted*/

    List<fsm._symboltable.StateSymbol> adaptedSymbols = new ArrayList<fsm._symboltable.StateSymbol>();
    for (fsm._symboltable.IStateSymbolResolver symDel : getAdaptedStateSymbolResolverList()) {
        adaptedSymbols.addAll(symDel.resolveAdaptedStateSymbol(foundSymbols, name, modifier, predicate));
    }
    return adaptedSymbols;
}

  default /* generated by template core.Method*/
 public  List<fsm._symboltable.StateSymbol> resolveStateMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<fsm._symboltable.StateSymbol> predicate)

 {
      /* generated by template _symboltable.iglobalscope.ResolveMany4GlobalScope*/

  // First, try to resolve the symbol in the current scope and its sub scopes.
  List<fsm._symboltable.StateSymbol> resolvedSymbol = resolveStateDownMany(foundSymbols, name,  modifier, predicate);

  if (!resolvedSymbol.isEmpty()) {
    return resolvedSymbol;
  }

  // Symbol not found: try to load corresponding model and build its symbol table
  loadState(name);

  // Maybe the symbol now exists in this scope (or its sub scopes). So, resolve down, again.
  resolvedSymbol = resolveStateDownMany(false, name, modifier, predicate);
  foundSymbols = foundSymbols  || resolvedSymbol.size() > 0;
  if (!foundSymbols && !isStateSymbolsAlreadyResolved()){
    setStateSymbolsAlreadyResolved(true);
    resolvedSymbol.addAll(resolveAdaptedState(foundSymbols, name, modifier, predicate));
  }
  setStateSymbolsAlreadyResolved(false);
  return resolvedSymbol;
}

  /* generated by template core.Method*/
 abstract  public  void loadState (String name)

;
  /* generated by template core.Method*/
 abstract  public  void loadFileForModelName (String modelName)

;
  default /* generated by template core.Method*/
 public  fsm._symboltable.IFSMScope getEnclosingScope ()

 {
      Log.error("0xA6100x45246 GlobalScope FSMGlobalScope has no EnclosingScope, so you cannot call methodgetEnclosingScope.");
    return null;
}

  default /* generated by template core.Method*/
 public  void setEnclosingScope (fsm._symboltable.IFSMScope enclosingScope)

 {
      Log.error("0xA6100x45245 GlobalScope FSMGlobalScope has no EnclosingScope, so you cannot call methodsetEnclosingScope.");
}

  default /* generated by template core.Method*/
 public  String getName ()

 {
      Log.error("0xA6101x08368 Global scopes do not have names.");
    return null;
}

  default /* generated by template core.Method*/
 public  boolean isPresentName ()

 {
      return false;
}

  default /* generated by template core.Method*/
 public  boolean checkIfContinueAsSubScope (String symbolName)

 {
      return false;
}

  /* generated by template core.Method*/
 abstract  public  Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> getSymbolDeSers ()

;
  default /* generated by template core.Method*/
 public  void putSymbolDeSer (String key,de.monticore.symboltable.serialization.ISymbolDeSer value)

 {
      getSymbolDeSers().put(key, value);
}

  default /* generated by template core.Method*/
 public  de.monticore.symboltable.serialization.ISymbolDeSer getSymbolDeSer (String key)

 {
      return getSymbolDeSers().get(key);
}

  default /* generated by template core.Method*/
 public  void putStateSymbolDeSer (String kind)

 {
      putSymbolDeSer(kind, new fsm._symboltable.StateSymbolDeSer());
}

  /* generated by template core.Method*/
 abstract  public  IFSMGlobalScope getRealThis ()

;
}
