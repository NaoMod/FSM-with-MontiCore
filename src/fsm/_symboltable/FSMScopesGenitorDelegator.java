/* generated from model FSM */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class FSMScopesGenitorDelegator  {

    /* generated by template core.Attribute*/
 protected  Deque<fsm._symboltable.IFSMScope> scopeStack = new java.util.ArrayDeque<>();

    /* generated by template core.Attribute*/
 protected  final  FSMScopesGenitor symbolTable ;

    /* generated by template core.Attribute*/
 protected  fsm._symboltable.IFSMGlobalScope globalScope ;

    /* generated by template core.Attribute*/
 protected  fsm._visitor.FSMTraverser traverser ;


    /* generated by template core.Constructor*/
 public  FSMScopesGenitorDelegator()
 {
  /* generated by template _symboltable.scopesgenitordelegator.ConstructorScopesGenitorDelegator*/

  this.globalScope = fsm.FSMMill.globalScope();
  this.traverser = fsm.FSMMill.traverser();
  this.scopeStack.push(this.globalScope);
  de.monticore.literals.mcliteralsbasis._symboltable.MCLiteralsBasisScopesGenitor mCLiteralsBasisScopesGenitor = de.monticore.literals.mcliteralsbasis.MCLiteralsBasisMill.scopesGenitor();
  mCLiteralsBasisScopesGenitor.setScopeStack(scopeStack);
  traverser.add4MCLiteralsBasis(mCLiteralsBasisScopesGenitor);
  traverser.setMCLiteralsBasisHandler(mCLiteralsBasisScopesGenitor);

  de.monticore.literals.mccommonliterals._symboltable.MCCommonLiteralsScopesGenitor mCCommonLiteralsScopesGenitor = de.monticore.literals.mccommonliterals.MCCommonLiteralsMill.scopesGenitor();
  mCCommonLiteralsScopesGenitor.setScopeStack(scopeStack);
  traverser.add4MCCommonLiterals(mCCommonLiteralsScopesGenitor);
  traverser.setMCCommonLiteralsHandler(mCCommonLiteralsScopesGenitor);

  symbolTable = fsm.FSMMill.scopesGenitor();
  symbolTable.setScopeStack(scopeStack);
  traverser.add4FSM(symbolTable);
  traverser.setFSMHandler(symbolTable);
}


    /* generated by template core.Method*/
 public  fsm._symboltable.IFSMArtifactScope createFromAST (fsm._ast.ASTFSM rootNode)

 {
      /* generated by template _symboltable.scopesgenitordelegator.CreateFromASTDelegator*/

  fsm._symboltable.IFSMArtifactScope as =  symbolTable.createFromAST(rootNode);
  if (as.isPresentName()){
    if (!as.getPackageName().isEmpty()){
      globalScope.addLoadedFile(as.getPackageName() + "." + as.getName());
    } else {
      globalScope.addLoadedFile(as.getName());
    }
  }
  return as;
}

}
