/* generated from model FSM */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class StateSymbolSurrogateBuilder  {

    /* generated by template core.Attribute*/
 protected  StateSymbolSurrogateBuilder realBuilder ;

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  fsm._symboltable.IFSMScope enclosingScope ;


    /* generated by template core.Constructor*/
 public  StateSymbolSurrogateBuilder()
 {
  this.realBuilder = (StateSymbolSurrogateBuilder) this;
}


    /* generated by template core.Method*/
 public  StateSymbolSurrogateBuilder setName (String name)

 {
      /* generated by template _ast.builder.Set4ASTBuilder*/

    this.name = name;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  String getName ()

 {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  fsm._symboltable.IFSMScope getEnclosingScope ()

 {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  StateSymbolSurrogateBuilder setEnclosingScope (fsm._symboltable.IFSMScope enclosingScope)

 {
      /* generated by template _ast.builder.Set4ASTBuilder*/

    this.enclosingScope = enclosingScope;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  StateSymbolSurrogate build ()

 {
      /* generated by template _symboltable.symbolsurrogate.BuildSymbolSurrogate*/

  StateSymbolSurrogate symbolReference = new StateSymbolSurrogate(name);
  symbolReference.setEnclosingScope(enclosingScope);
  return symbolReference;
}

}
