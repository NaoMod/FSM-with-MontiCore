/* generated from model FSM */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class FSMGlobalScope extends fsm._symboltable.FSMScope  implements fsm._symboltable.IFSMGlobalScope {

    /* generated by template core.Attribute*/
 protected  de.monticore.io.paths.MCPath symbolPath ;

    /* generated by template core.Attribute*/
 protected  String fileExt ;

    /* generated by template core.Attribute*/
 public  de.monticore.symboltable.serialization.IDeSer deSer ;

    /* generated by template core.Attribute*/
 protected  Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> symbolDeSers  = com.google.common.collect.Maps.newHashMap();

    /* generated by template core.Attribute*/
 protected  FSMSymbols2Json symbols2Json ;

    /* generated by template core.Attribute*/
 protected  Set<String> cache = new java.util.HashSet<>();

    /* generated by template core.Attribute*/
 protected  List<fsm._symboltable.IStateSymbolResolver> adaptedStateSymbolResolver  = new ArrayList<fsm._symboltable.IStateSymbolResolver>();


    /* generated by template core.Constructor*/
 public  FSMGlobalScope(de.monticore.io.paths.MCPath symbolPath,String fileExt)
 {
  /* generated by template _symboltable.globalscope.ConstructorGlobalScope*/

  this.symbolPath = Log.errorIfNull(symbolPath);
  this.fileExt = Log.errorIfNull(fileExt);
  init();

}

    /* generated by template core.Constructor*/
 public  FSMGlobalScope()
 {
  /* generated by template _symboltable.globalscope.ZeroArgsConstructorGlobalScope*/

  this.symbolPath = new de.monticore.io.paths.MCPath();
  this.fileExt = ".*sym";
  init();

}


    /* generated by template core.Method*/
 public  de.monticore.io.paths.MCPath getSymbolPath ()

 {
      /* generated by template methods.Get*/

return this.symbolPath;

}

    /* generated by template core.Method*/
 public  void setSymbolPath (de.monticore.io.paths.MCPath symbolPath)

 {
      /* generated by template methods.Set*/

this.symbolPath = symbolPath;

}

    /* generated by template core.Method*/
 public  String getFileExt ()

 {
      /* generated by template methods.Get*/

return this.fileExt;

}

    /* generated by template core.Method*/
 public  void setFileExt (String fileExt)

 {
      /* generated by template methods.Set*/

this.fileExt = fileExt;

}

    /* generated by template core.Method*/
 public  de.monticore.symboltable.serialization.IDeSer getDeSer ()

 {
      /* generated by template methods.Get*/

return this.deSer;

}

    /* generated by template core.Method*/
 public  void setDeSer (de.monticore.symboltable.serialization.IDeSer deSer)

 {
      /* generated by template methods.Set*/

this.deSer = deSer;

}

    /* generated by template core.Method*/
 public  Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> getSymbolDeSers ()

 {
      /* generated by template methods.Get*/

return this.symbolDeSers;

}

    /* generated by template core.Method*/
 public  void setSymbolDeSers (Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> symbolDeSers)

 {
      /* generated by template methods.Set*/

this.symbolDeSers = symbolDeSers;

}

    /* generated by template core.Method*/
 public  void setSymbols2Json (FSMSymbols2Json symbols2Json)

 {
      /* generated by template methods.Set*/

this.symbols2Json = symbols2Json;

}

    /* generated by template core.Method*/
 public  FSMSymbols2Json getSymbols2Json ()

 {
      /* generated by template _symboltable.globalscope.GetSymbols2Json*/

  if(null == symbols2Json) {
    //initialize on demand to avoid cyclic constructor calls
    symbols2Json = new fsm._symboltable.FSMSymbols2Json();
  }
 return symbols2Json;
}

    /* generated by template core.Method*/
 public  void addLoadedFile (String name)

 {
      cache.add(name);
}

    /* generated by template core.Method*/
 public  void clearLoadedFiles ()

 {
      cache.clear();
}

    /* generated by template core.Method*/
 public  boolean isFileLoaded (String name)

 {
      return cache.contains(name);
}

    /* generated by template core.Method*/
 public  void init ()

 {
      /* generated by template _symboltable.globalscope.Init*/

  deSer = new fsm._symboltable.FSMDeSer();
  symbolDeSers.put("fsm._symboltable.StateSymbol", new fsm._symboltable.StateSymbolDeSer());

}

    /* generated by template core.Method*/
 public  List<fsm._symboltable.IStateSymbolResolver> getAdaptedStateSymbolResolverList ()

 {
      return this.adaptedStateSymbolResolver;
}

    /* generated by template core.Method*/
 public  void setAdaptedStateSymbolResolverList (List<fsm._symboltable.IStateSymbolResolver> adaptedStateSymbolResolver)

 {
      this.adaptedStateSymbolResolver = adaptedStateSymbolResolver;
}

    /* generated by template core.Method*/
 public  void loadState (String name)

 {
      /* generated by template _symboltable.globalscope.Load*/

  for (String modelName : calculateModelNamesForState(name)) {
    loadFileForModelName(modelName);
  }

}

    /* generated by template core.Method*/
 public  void loadFileForModelName (String modelName)

 {
      /* generated by template _symboltable.globalscope.LoadFileForModelName*/

  java.util.Optional<java.net.URL> location = getSymbolPath().find(modelName, getFileExt());
  if(location.isPresent() && !isFileLoaded(location.get().toString())){
    addLoadedFile(location.get().toString());
    IFSMArtifactScope as = getSymbols2Json().load(location.get());
    addSubScope(as);
  }

}

    /* generated by template core.Method*/
 public  FSMGlobalScope getRealThis ()

 {
      return this;
}

    /* generated by template core.Method*/
 public  void clear ()

 {
      /* generated by template _symboltable.globalscope.Clear*/

  clearLoadedFiles();
  getAdaptedStateSymbolResolverList().clear();
  getStateSymbols().clear();
  this.symbolPath = new de.monticore.io.paths.MCPath();
  this.subScopes.clear();
  this.symbolDeSers.clear();
  this.fileExt = ".*sym";
  init();

}

}
