/* generated from model FSM */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class FSMScopesGenitor  implements fsm._visitor.FSMVisitor2,fsm._visitor.FSMHandler {

    /* generated by template core.Attribute*/
 protected  Deque<fsm._symboltable.IFSMScope> scopeStack = new java.util.ArrayDeque<>();

    /* generated by template core.Attribute*/
 protected  fsm._visitor.FSMTraverser traverser ;

    /* generated by template core.Attribute*/
 protected  fsm._symboltable.IFSMScope firstCreatedScope ;


    /* generated by template core.Constructor*/
 public  FSMScopesGenitor()
 {
  this.scopeStack = new ArrayDeque<>();
}


    /* generated by template core.Method*/
 public  fsm._visitor.FSMTraverser getTraverser ()

 {
      /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template core.Method*/
 public  void setTraverser (fsm._visitor.FSMTraverser traverser)

 {
      /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template core.Method*/
 public  fsm._symboltable.IFSMScope getFirstCreatedScope ()

 {
      /* generated by template methods.Get*/

return this.firstCreatedScope;

}

    /* generated by template core.Method*/
 public  fsm._symboltable.IFSMArtifactScope createFromAST (fsm._ast.ASTFSM rootNode)

 {
      /* generated by template _symboltable.scopesgenitor.CreateFromAST*/

  Log.errorIfNull(rootNode, "0xA7004x37476 Error by creating of the FSMScopesGenitor symbol table: top ast node is null");
  IFSMArtifactScope artifactScope = fsm.FSMMill.artifactScope();
  artifactScope.setPackageName("");
  artifactScope.setImportsList(new ArrayList<>());
  artifactScope.setAstNode(rootNode);
  putOnStack(artifactScope);
  initArtifactScopeHP1(artifactScope);
  rootNode.accept(getTraverser());
  initArtifactScopeHP2(artifactScope);
  return artifactScope;
}

    /* generated by template core.Method*/
 public  void putOnStack (fsm._symboltable.IFSMScope scope)

 {
      /* generated by template _symboltable.scopesgenitor.PutOnStack*/
  Log.errorIfNull(scope);

if (scope.getEnclosingScope() == null && getCurrentScope().isPresent()) {
    scope.setEnclosingScope(getCurrentScope().get());
    getCurrentScope().get().addSubScope(scope);
} else if (scope.getEnclosingScope() != null && getCurrentScope().isPresent()) {
    if (scope.getEnclosingScope() != getCurrentScope().get()) {
      Log.warn("0xA1043 The enclosing scope is not the same as the current scope on the stack.");
    }
  }

  if (firstCreatedScope == null) {
    firstCreatedScope = scope;
  }

  scopeStack.addLast(scope);
}

    /* generated by template core.Method*/
 public  final  Optional<fsm._symboltable.IFSMScope> getCurrentScope ()

 {
      return Optional.ofNullable(scopeStack.peekLast());
}

    /* generated by template core.Method*/
 public  final  Optional<fsm._symboltable.IFSMScope> removeCurrentScope ()

 {
      return Optional.ofNullable(scopeStack.pollLast());
}

    /* generated by template core.Method*/
 public  void setScopeStack (Deque<? extends fsm._symboltable.IFSMScope> scopeStack)

 {
      this.scopeStack = Log.errorIfNull((Deque<fsm._symboltable.IFSMScope>)scopeStack);
}

    /* generated by template core.Method*/
 public  fsm._symboltable.IFSMScope createScope (boolean shadowing)

 {
      /* generated by template _symboltable.scopesgenitor.CreateScope*/

  fsm._symboltable.IFSMScope scope = fsm.FSMMill.scope();
  scope.setShadowing(shadowing);
  return scope;
}

    /* generated by template core.Method*/
 public  void visit (fsm._ast.ASTState node)

 {
      /* generated by template _symboltable.scopesgenitor.Visit4SSC*/

  fsm._symboltable.StateSymbol symbol = fsm.FSMMill.stateSymbolBuilder().setName(node.getName()).build();
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA5021x53432 Symbol cannot be added to current scope, since no scope exists.");
  }
  // symbol -> ast
  symbol.setAstNode(node);

  // ast -> symbol
  node.setSymbol(symbol);
  node.setEnclosingScope(symbol.getEnclosingScope());

  initStateHP1(node.getSymbol());

}

    /* generated by template core.Method*/
 public  void endVisit (fsm._ast.ASTState node)

 {
      /* generated by template _symboltable.scopesgenitor.EndVisitSymbol*/

  if(node.isPresentSymbol()){
    initStateHP2(node.getSymbol());
  }
}

    /* generated by template core.Method*/
 protected  void initStateHP1 (fsm._symboltable.StateSymbol symbol)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initStateHP2 (fsm._symboltable.StateSymbol symbol)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 public  void visit (fsm._ast.ASTFSM node)

 {
      /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (fsm._ast.ASTTransition node)

 {
      /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 protected  void initScopeHP1 (fsm._symboltable.IFSMScope scope)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initScopeHP2 (fsm._symboltable.IFSMScope scope)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initArtifactScopeHP1 (fsm._symboltable.IFSMArtifactScope scope)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void initArtifactScopeHP2 (fsm._symboltable.IFSMArtifactScope scope)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 public  void addToScopeStack (fsm._symboltable.IFSMScope scope)

 {
      scopeStack.addLast(scope);
}

}
