/* generated from model FSM */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._visitor;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class FSMInheritanceHandler  implements fsm._visitor.FSMHandler {

    /* generated by template core.Attribute*/
 protected  fsm._visitor.FSMTraverser traverser ;



    /* generated by template core.Method*/
 public  fsm._visitor.FSMTraverser getTraverser ()

 {
      /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template core.Method*/
 public  void setTraverser (fsm._visitor.FSMTraverser traverser)

 {
      /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTFSM node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((fsm._ast.ASTFSMNode) node);
  FSMHandler.super.handle(node);
  getTraverser().endVisit((fsm._ast.ASTFSMNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTState node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((fsm._ast.ASTFSMNode) node);
  FSMHandler.super.handle(node);
  getTraverser().endVisit((fsm._ast.ASTFSMNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTTransition node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((fsm._ast.ASTFSMNode) node);
  FSMHandler.super.handle(node);
  getTraverser().endVisit((fsm._ast.ASTFSMNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTFSMNode node)

 {
      /* generated by template _visitor.handler.HandleASTInheritance*/

  getTraverser().visit((ASTNode) node);
  getTraverser().visit((fsm._ast.ASTFSMNode) node);
  FSMHandler.super.handle(node);
  getTraverser().endVisit((fsm._ast.ASTFSMNode) node);
  getTraverser().endVisit((ASTNode) node);
}

    /* generated by template core.Method*/
 public  void handle (fsm._symboltable.IFSMScope node)

 {
      /* generated by template _visitor.handler.HandleSymTabInheritance*/

  getTraverser().visit((de.monticore.symboltable.IScope) node);
  getTraverser().visit((fsm._symboltable.IFSMScope) node);
  getTraverser().visit((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  getTraverser().visit((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  getTraverser().visit((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  FSMHandler.super.handle(node);
  getTraverser().endVisit((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  getTraverser().endVisit((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  getTraverser().endVisit((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  getTraverser().endVisit((fsm._symboltable.IFSMScope) node);
  getTraverser().endVisit((de.monticore.symboltable.IScope) node);

}

    /* generated by template core.Method*/
 public  void handle (fsm._symboltable.IFSMArtifactScope node)

 {
      /* generated by template _visitor.handler.HandleSymTabInheritance*/

  getTraverser().visit((de.monticore.symboltable.IScope) node);
  getTraverser().visit((fsm._symboltable.IFSMScope) node);
  getTraverser().visit((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  getTraverser().visit((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  getTraverser().visit((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  getTraverser().visit((fsm._symboltable.IFSMScope) node);
  FSMHandler.super.handle(node);
  getTraverser().endVisit((fsm._symboltable.IFSMScope) node);
  getTraverser().endVisit((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  getTraverser().endVisit((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  getTraverser().endVisit((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  getTraverser().endVisit((fsm._symboltable.IFSMScope) node);
  getTraverser().endVisit((de.monticore.symboltable.IScope) node);

}

    /* generated by template core.Method*/
 public  void handle (fsm._symboltable.StateSymbol node)

 {
      /* generated by template _visitor.handler.HandleSymTabInheritance*/

  getTraverser().visit((de.monticore.symboltable.ISymbol) node);
  FSMHandler.super.handle(node);
  getTraverser().endVisit((de.monticore.symboltable.ISymbol) node);

}

}
