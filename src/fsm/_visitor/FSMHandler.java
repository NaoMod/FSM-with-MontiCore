/* generated from model FSM */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._visitor;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;

/* generated by template core.Annotations*/
// empty template: no Annotation

 public  interface FSMHandler extends de.monticore.visitor.IHandler  { 


  default /* generated by template core.Method*/
 public  fsm._visitor.FSMTraverser getTraverser ()

 {
          throw new UnsupportedOperationException("0xA7015x22632 The getter for the traverser is not implemented. You might want to implement a wrapper class to allow setting/getting the traverser.");

}

  default /* generated by template core.Method*/
 public  void setTraverser (fsm._visitor.FSMTraverser traverser)

 {
          throw new UnsupportedOperationException("0xA7016x91419 The setter for the traverser is not implemented. You might want to implement a wrapper class to allow setting/getting the traverser.");

}

  default /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTFSM node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (fsm._ast.ASTFSM node)

 {
      /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<fsm._ast.ASTState> iter_states = node.getStateList().iterator();
      while (iter_states.hasNext()) {
        iter_states.next().accept(getTraverser());
      }
    }


}

  default /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTState node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (fsm._ast.ASTState node)

 {
      /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<fsm._ast.ASTTransition> iter_transitions = node.getTransitionList().iterator();
      while (iter_transitions.hasNext()) {
        iter_transitions.next().accept(getTraverser());
      }
    }


}

  default /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTTransition node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (fsm._ast.ASTTransition node)

 {
      /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getInput()) {
        node.getInput().accept(getTraverser());
      }
      if (null != node.getOutput()) {
        node.getOutput().accept(getTraverser());
      }


}

  default /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTFSMNode node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void handle (fsm._symboltable.StateSymbol node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (fsm._symboltable.StateSymbol node)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (fsm._symboltable.IFSMScope node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (fsm._symboltable.IFSMScope node)

 {
      /* generated by template _visitor.handler.TraverseScope*/

  // traverse symbols within the scope
  for (fsm._symboltable.StateSymbol s : node.getLocalStateSymbols()) {
    s.accept(getTraverser());
  }

}

  default /* generated by template core.Method*/
 public  void handle (fsm._symboltable.IFSMArtifactScope node)

 {
      /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (fsm._symboltable.IFSMArtifactScope node)

 {
      traverse((fsm._symboltable.IFSMScope) node);
}

}
