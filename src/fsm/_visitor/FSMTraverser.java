/* generated from model FSM */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package fsm._visitor;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;

/* generated by template core.Annotations*/
// empty template: no Annotation

 public  interface FSMTraverser extends de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser  { 


  default /* generated by template core.Method*/
 public  void add4FSM (fsm._visitor.FSMVisitor2 fSMVisitor)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  List<fsm._visitor.FSMVisitor2> getFSMVisitorList ()

 {
      return new ArrayList<>();
}

  default /* generated by template core.Method*/
 public  void add4MCCommonLiterals (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList ()

 {
      return new ArrayList<>();
}

  default /* generated by template core.Method*/
 public  void add4MCBasics (de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList ()

 {
      return new ArrayList<>();
}

  default /* generated by template core.Method*/
 public  void add4MCLiteralsBasis (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList ()

 {
      return new ArrayList<>();
}

  default /* generated by template core.Method*/
 public  void setFSMHandler (fsm._visitor.FSMHandler fSMHandler)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  Optional<fsm._visitor.FSMHandler> getFSMHandler ()

 {
      return Optional.empty();
}

  default /* generated by template core.Method*/
 public  void setMCCommonLiteralsHandler (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler ()

 {
      return Optional.empty();
}

  default /* generated by template core.Method*/
 public  void setMCBasicsHandler (de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler ()

 {
      return Optional.empty();
}

  default /* generated by template core.Method*/
 public  void setMCLiteralsBasisHandler (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler ()

 {
      return Optional.empty();
}

  default /* generated by template core.Method*/
 public  void visit (fsm._ast.ASTFSM node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template core.Method*/
 public  void endVisit (fsm._ast.ASTFSM node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTFSM node)

 {
      /* generated by template _visitor.traverser.Handle*/

  if (getFSMHandler().isPresent()) {
    getFSMHandler().get().handle(node);
  } else {
    visit(node);
    traverse(node);
    endVisit(node);
  }
}

  default /* generated by template core.Method*/
 public  void traverse (fsm._ast.ASTFSM node)

 {
      /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getFSMHandler().isPresent()) {
  getFSMHandler().get().traverse(node);
} else {
    {
      Iterator<fsm._ast.ASTState> iter_states = node.getStateList().iterator();
      while (iter_states.hasNext()) {
        iter_states.next().accept(this);
      }
    }

}
}

  default /* generated by template core.Method*/
 public  void visit (fsm._ast.ASTState node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template core.Method*/
 public  void endVisit (fsm._ast.ASTState node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTState node)

 {
      /* generated by template _visitor.traverser.Handle*/

  if (getFSMHandler().isPresent()) {
    getFSMHandler().get().handle(node);
  } else {
    visit(node);
    traverse(node);
    endVisit(node);
  }
}

  default /* generated by template core.Method*/
 public  void traverse (fsm._ast.ASTState node)

 {
      /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getFSMHandler().isPresent()) {
  getFSMHandler().get().traverse(node);
} else {
    {
      Iterator<fsm._ast.ASTTransition> iter_transitions = node.getTransitionList().iterator();
      while (iter_transitions.hasNext()) {
        iter_transitions.next().accept(this);
      }
    }

}
}

  default /* generated by template core.Method*/
 public  void visit (fsm._ast.ASTTransition node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template core.Method*/
 public  void endVisit (fsm._ast.ASTTransition node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTTransition node)

 {
      /* generated by template _visitor.traverser.Handle*/

  if (getFSMHandler().isPresent()) {
    getFSMHandler().get().handle(node);
  } else {
    visit(node);
    traverse(node);
    endVisit(node);
  }
}

  default /* generated by template core.Method*/
 public  void traverse (fsm._ast.ASTTransition node)

 {
      /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getFSMHandler().isPresent()) {
  getFSMHandler().get().traverse(node);
} else {
      if (null != node.getInput()) {
        node.getInput().accept(this);
      }
      if (null != node.getOutput()) {
        node.getOutput().accept(this);
      }

}
}

  default /* generated by template core.Method*/
 public  void visit (fsm._ast.ASTFSMNode node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template core.Method*/
 public  void endVisit (fsm._ast.ASTFSMNode node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template core.Method*/
 public  void handle (fsm._ast.ASTFSMNode node)

 {
      /* generated by template _visitor.traverser.Handle*/

  if (getFSMHandler().isPresent()) {
    getFSMHandler().get().handle(node);
  } else {
    visit(node);
    // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
    endVisit(node);
  }
}

  default /* generated by template core.Method*/
 public  void visit (fsm._symboltable.StateSymbol node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template core.Method*/
 public  void endVisit (fsm._symboltable.StateSymbol node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template core.Method*/
 public  void handle (fsm._symboltable.StateSymbol node)

 {
      /* generated by template _visitor.traverser.Handle*/

  if (getFSMHandler().isPresent()) {
    getFSMHandler().get().handle(node);
  } else {
    visit(node);
    traverse(node);
    endVisit(node);
  }
}

  default /* generated by template core.Method*/
 public  void traverse (fsm._symboltable.StateSymbol node)

 {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void visit (fsm._symboltable.IFSMScope node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template core.Method*/
 public  void endVisit (fsm._symboltable.IFSMScope node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template core.Method*/
 public  void handle (fsm._symboltable.IFSMScope node)

 {
      /* generated by template _visitor.traverser.Handle*/

  if (getFSMHandler().isPresent()) {
    getFSMHandler().get().handle(node);
  } else {
    visit(node);
    traverse(node);
    endVisit(node);
  }
}

  default /* generated by template core.Method*/
 public  void traverse (fsm._symboltable.IFSMScope node)

 {
      /* generated by template _visitor.traverser.TraverseScope*/

  if (getFSMHandler().isPresent()) {
    getFSMHandler().get().traverse(node);
  } else {
  // traverse symbols within the scope
  for (fsm._symboltable.StateSymbol s : node.getLocalStateSymbols()) {
    s.accept(this);
  }
}
}

  default /* generated by template core.Method*/
 public  void visit (fsm._symboltable.IFSMArtifactScope node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template core.Method*/
 public  void endVisit (fsm._symboltable.IFSMArtifactScope node)

 {
      /* generated by template _visitor.traverser.DelegatingMethods*/

  getFSMVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template core.Method*/
 public  void handle (fsm._symboltable.IFSMArtifactScope node)

 {
      /* generated by template _visitor.traverser.Handle*/

  if (getFSMHandler().isPresent()) {
    getFSMHandler().get().handle(node);
  } else {
    visit(node);
    traverse(node);
    endVisit(node);
  }
}

  default /* generated by template core.Method*/
 public  void traverse (fsm._symboltable.IFSMArtifactScope node)

 {
      traverse((fsm._symboltable.IFSMScope) node);
}

}
