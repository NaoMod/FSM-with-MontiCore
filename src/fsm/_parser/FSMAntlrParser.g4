/* generated by template parser.Parser*/


/* generated by template parser.ParserHeader*/
parser grammar FSMAntlrParser;
@parser::header {
package fsm._parser;
import de.monticore.antlr4.*;
import de.monticore.parser.*;
import fsm.*;
}

options {
  superClass=MCParser;
  tokenVocab=FSMAntlrLexer;
}

@parser::members

{

  // convert function for Name
private String convertName(Token t)  {
    return t.getText();
}

  // convert function for NEWLINE
private String convertNEWLINE(Token t)  {
    return t.getText();
}

  // convert function for WS
private String convertWS(Token t)  {
    return t.getText();
}

  // convert function for SL_COMMENT
private String convertSL_COMMENT(Token t)  {
    return t.getText();
}

  // convert function for ML_COMMENT
private String convertML_COMMENT(Token t)  {
    return t.getText();
}

  // convert function for Digits
private String convertDigits(Token t)  {
    return t.getText();
}

  // convert function for Digit
private String convertDigit(Token t)  {
    return t.getText();
}

  // convert function for Char
private String convertChar(Token t)  {
    return t.getText();
}

  // convert function for SingleCharacter
private String convertSingleCharacter(Token t)  {
    return t.getText();
}

  // convert function for String
private String convertString(Token t)  {
    return t.getText();
}

  // convert function for StringCharacters
private String convertStringCharacters(Token t)  {
    return t.getText();
}

  // convert function for StringCharacter
private String convertStringCharacter(Token t)  {
    return t.getText();
}

  // convert function for EscapeSequence
private String convertEscapeSequence(Token t)  {
    return t.getText();
}

  // convert function for OctalEscape
private String convertOctalEscape(Token t)  {
    return t.getText();
}

  // convert function for UnicodeEscape
private String convertUnicodeEscape(Token t)  {
    return t.getText();
}

  // convert function for ZeroToThree
private String convertZeroToThree(Token t)  {
    return t.getText();
}

  // convert function for HexDigit
private String convertHexDigit(Token t)  {
    return t.getText();
}

  // convert function for OctalDigit
private String convertOctalDigit(Token t)  {
    return t.getText();
}

}

  
 // Start of 'ASTClassProd NullLiteral'
nullLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTNullLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTNullLiteralBuilder _builder = fsm.FSMMill.nullLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal null'
NULL3392903
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BooleanLiteral'
booleanLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteralBuilder _builder = fsm.FSMMill.booleanLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTConstantGroup'
('true'{
_builder.setSource(de.monticore.literals.mccommonliterals._ast.ASTConstantsMCCommonLiterals.TRUE);
}|
'false'{
_builder.setSource(de.monticore.literals.mccommonliterals._ast.ASTConstantsMCCommonLiterals.FALSE);
})// End of 'ASTConstantGroup'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd CharLiteral'
charLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTCharLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTCharLiteralBuilder _builder = fsm.FSMMill.charLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Char{_builder.setSource(convertChar($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd StringLiteral'
stringLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTStringLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTStringLiteralBuilder _builder = fsm.FSMMill.stringLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=String{_builder.setSource(convertString($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd NatLiteral'
natLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTNatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTNatLiteralBuilder _builder = fsm.FSMMill.natLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedNatLiteral'
signedNatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteralBuilder _builder = fsm.FSMMill.signedNatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2)}?
  (
  
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  
)
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  |
  (tmp1=Digits{_builder.setDigits(convertDigits($tmp1));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicLongLiteral'
basicLongLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteralBuilder _builder = fsm.FSMMill.basicLongLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(2,"l","L") && noSpace(2)}?
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicLongLiteral'
signedBasicLongLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteralBuilder _builder = fsm.FSMMill.signedBasicLongLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(3,"l","L") && noSpace(2,3)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  |
  {cmpToken(2,"l","L") && noSpace(2)}?
  (tmp1=Digits{_builder.setDigits(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicFloatLiteral'
basicFloatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteralBuilder _builder = fsm.FSMMill.basicFloatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(4,"f","F") && noSpace(2,3,4)}?
  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicFloatLiteral'
signedBasicFloatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteralBuilder _builder = fsm.FSMMill.signedBasicFloatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(5,"f","F") && noSpace(2,3,4,5)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  |
  {cmpToken(4,"f","F") && noSpace(2,3,4)}?
  (tmp2=Digits{_builder.setPre(convertDigits($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp3=Digits{_builder.setPost(convertDigits($tmp3));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicDoubleLiteral'
basicDoubleLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteralBuilder _builder = fsm.FSMMill.basicDoubleLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2,3)}?
  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicDoubleLiteral'
signedBasicDoubleLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteralBuilder _builder = fsm.FSMMill.signedBasicDoubleLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2,3,4)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  |
  {noSpace(2,3)}?
  (tmp2=Digits{_builder.setPre(convertDigits($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp3=Digits{_builder.setPost(convertDigits($tmp3));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd FSM'
fSM returns [fsm._ast.ASTFSM ret = null]
@init{// getActionForAltBeforeRuleBody
fsm._ast.ASTFSMBuilder _builder = fsm.FSMMill.fSMBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal FSM'
FSM69920
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal states'
STATES3402485250
  
 // Start of 'ASTTerminal {'
LCURLY
  ( tmp1=state{addToIteratedAttributeIfNotNull(_builder.getStateList(), _localctx.tmp1.ret);}) * 
  
  
 // Start of 'ASTTerminal }'
RCURLY
  
 // Start of 'ASTTerminal initial state'
LEXNAME0
  
 // Start of 'ASTTerminal {'
LCURLY
  (tmp2=Name{_builder.setInitialState(convertName($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal }'
RCURLY
  
 // Start of 'ASTTerminal final states'
LEXNAME1
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
  (tmp3=Name{ addToIteratedAttributeIfNotNull(_builder.getFinalStatesList(), convertName($tmp3));}

  ) 
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
)+
  
 // Start of 'ASTTerminal }'
RCURLY
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd State'
state returns [fsm._ast.ASTState ret = null]
@init{// getActionForAltBeforeRuleBody
fsm._ast.ASTStateBuilder _builder = fsm.FSMMill.stateBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal state'
STATE109757585
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal {'
LCURLY
  ( tmp1=transition{addToIteratedAttributeIfNotNull(_builder.getTransitionList(), _localctx.tmp1.ret);}) * 
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Transition'
transition returns [fsm._ast.ASTTransition ret = null]
@init{// getActionForAltBeforeRuleBody
fsm._ast.ASTTransitionBuilder _builder = fsm.FSMMill.transitionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal Transition to'
LEXNAME2
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal :'
COLON
  
 // Start of 'ASTTerminal input ='
LEXNAME3
   tmp1=stringLiteral{_builder.setInput(_localctx.tmp1.ret);}  
  
  
 // Start of 'ASTTerminal output ='
LEXNAME4
   tmp2=stringLiteral{_builder.setOutput(_localctx.tmp2.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'


  literal
   returns [de.monticore.literals.mcliteralsbasis._ast.ASTLiteral ret]
  : 
  
  tmp3=numericLiteral
{$ret=$tmp3.ret;}
  |
  tmp4=nullLiteral
{$ret=$tmp4.ret;}
  |
  tmp5=booleanLiteral
{$ret=$tmp5.ret;}
  |
  tmp6=charLiteral
{$ret=$tmp6.ret;}
  |
  tmp7=stringLiteral
{$ret=$tmp7.ret;}
  ;
  signedLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral ret]
  : 
  
  tmp8=signedNumericLiteral
{$ret=$tmp8.ret;}
  |
  tmp4=nullLiteral
{$ret=$tmp4.ret;}
  |
  tmp5=booleanLiteral
{$ret=$tmp5.ret;}
  |
  tmp6=charLiteral
{$ret=$tmp6.ret;}
  |
  tmp7=stringLiteral
{$ret=$tmp7.ret;}
  ;
  numericLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral ret]
  : 
  
  tmp9=natLiteral
{$ret=$tmp9.ret;}
  |
  tmp10=basicLongLiteral
{$ret=$tmp10.ret;}
  |
  tmp11=basicFloatLiteral
{$ret=$tmp11.ret;}
  |
  tmp12=basicDoubleLiteral
{$ret=$tmp12.ret;}
  ;
  signedNumericLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral ret]
  : 
  
  tmp13=signedNatLiteral
{$ret=$tmp13.ret;}
  |
  tmp14=signedBasicLongLiteral
{$ret=$tmp14.ret;}
  |
  tmp15=signedBasicFloatLiteral
{$ret=$tmp15.ret;}
  |
  tmp16=signedBasicDoubleLiteral
{$ret=$tmp16.ret;}
  ;

// parse EOF
mc_eof : EOF ;

  nokeyword_f102 : {next("f")}? Name;
  nokeyword_F70 : {next("F")}? Name;
  nokeyword_l108 : {next("l")}? Name;
  nokeyword_L76 : {next("L")}? Name;


